{"ast":null,"code":"//Model \nconst endPoint = 'http://localhost:9000/api/customers';\n\nclass apiModel {}\n\napiModel.all = () => {\n  return fetch(endPoint) // Method isn't required--Get all is default\n  .then(response => response.json()).catch(err => console.log('Could not get all customers\\n', err));\n};\n\napiModel.getOne = rowid => {\n  return fetch(`${endPoint}/${rowid}`).then(response => {\n    response.json();\n  }).then(x => {\n    return x;\n    console.log('X: ', x[0]);\n  }).catch(err => console.log('Could not get customer \\n', err));\n};\n\napiModel.create = customer => {\n  return fetch(endPoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(customer)\n  }) // .then(response => response.json())\n  .catch(err => console.log('Could not create customer\\n', err));\n};\n\napiModel.update = customer => {\n  let rowid = customer.rowid; // not expecting rowid in the body\n\n  delete customer.rowid;\n  console.log(customer);\n  return fetch(`${endPoint}/${rowid}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(customer)\n  }).then(response => response.json()).catch(err => console.log('Could not update customer \\n', err));\n};\n\napiModel.delete = customer => {\n  let rowid = customer.rowid; // not expecting rowid in the body\n\n  delete customer.rowid;\n  return fetch(`${endPoint}/${rowid}`, {\n    method: \"DELETE\"\n  }).catch(err => console.log('Could not delete customer \\n', err));\n};\n\nexport default apiModel;","map":{"version":3,"sources":["/Users/minsu/GeneralAssembly/project3/frontend/src/models/apiModel.js"],"names":["endPoint","apiModel","all","fetch","then","response","json","catch","err","console","log","getOne","rowid","x","create","customer","method","headers","body","JSON","stringify","update","delete"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,qCAAjB;;AAEA,MAAMC,QAAN,CAAe;;AAATA,Q,CACKC,G,GAAM,MAAM;AACf,SAAOC,KAAK,CAACH,QAAD,CAAL,CAAgB;AAAhB,GACFI,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,EAEFC,KAFE,CAEIC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,GAA7C,CAFX,CAAP;AAGH,C;;AALCP,Q,CAOKU,M,GAAUC,KAAD,IAAW;AACvB,SAAOT,KAAK,CAAE,GAAEH,QAAS,IAAGY,KAAM,EAAtB,CAAL,CACFR,IADE,CACGC,QAAQ,IAAI;AACdA,IAAAA,QAAQ,CAACC,IAAT;AACH,GAHE,EAIFF,IAJE,CAIGS,CAAC,IAAI;AACP,WAAOA,CAAP;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBG,CAAC,CAAC,CAAD,CAApB;AACH,GAPE,EAQFN,KARE,CAQIC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,GAAzC,CARX,CAAP;AASH,C;;AAjBCP,Q,CAmBKa,M,GAAUC,QAAD,IAAc;AAC1B,SAAOZ,KAAK,CAACH,QAAD,EAAW;AACnBgB,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFU;AAKnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,QAAf;AALa,GAAX,CAAL,CAOH;AAPG,GAQFR,KARE,CAQIC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,GAA3C,CARX,CAAP;AASH,C;;AA7BCP,Q,CA+BKoB,M,GAAUN,QAAD,IAAc;AAC1B,MAAIH,KAAK,GAAGG,QAAQ,CAACH,KAArB,CAD0B,CAE1B;;AACA,SAAOG,QAAQ,CAACH,KAAhB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;AACA,SAAOZ,KAAK,CAAE,GAAEH,QAAS,IAAGY,KAAM,EAAtB,EAAyB;AACjCI,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFwB;AAKjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,QAAf;AAL2B,GAAzB,CAAL,CAOFX,IAPE,CAOGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPf,EAQFC,KARE,CAQIC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,GAA5C,CARX,CAAP;AASH,C;;AA7CCP,Q,CA8CKqB,M,GAAUP,QAAD,IAAc;AAC1B,MAAIH,KAAK,GAAGG,QAAQ,CAACH,KAArB,CAD0B,CAE1B;;AACA,SAAOG,QAAQ,CAACH,KAAhB;AACA,SAAOT,KAAK,CAAE,GAAEH,QAAS,IAAGY,KAAM,EAAtB,EAAyB;AACjCI,IAAAA,MAAM,EAAE;AADyB,GAAzB,CAAL,CAGFT,KAHE,CAGIC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,GAA5C,CAHX,CAAP;AAIH,C;;AAGL,eAAeP,QAAf","sourcesContent":["//Model \nconst endPoint = 'http://localhost:9000/api/customers';\n\nclass apiModel {\n    static all = () => {\n        return fetch(endPoint) // Method isn't required--Get all is default\n            .then(response => response.json())\n            .catch(err => console.log('Could not get all customers\\n', err));\n    }\n    \n    static getOne = (rowid) => {\n        return fetch(`${endPoint}/${rowid}`)\n            .then(response => {\n                response.json()\n            })\n            .then(x => {\n                return x;\n                console.log('X: ', x[0]);\n            })\n            .catch(err => console.log('Could not get customer \\n', err));\n    };\n\n    static create = (customer) => {\n        return fetch(endPoint, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(customer)\n        })\n            // .then(response => response.json())\n            .catch(err => console.log('Could not create customer\\n', err))\n    }\n\n    static update = (customer) => {\n        let rowid = customer.rowid;\n        // not expecting rowid in the body\n        delete customer.rowid;\n        console.log(customer)\n        return fetch(`${endPoint}/${rowid}`, {\n            method: 'PUT',\n            headers: {  \n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(customer)\n        })\n            .then(response => response.json())\n            .catch(err => console.log('Could not update customer \\n', err));\n    };\n    static delete = (customer) => {\n        let rowid = customer.rowid;\n        // not expecting rowid in the body\n        delete customer.rowid;\n        return fetch(`${endPoint}/${rowid}`, {\n            method: \"DELETE\"\n        })\n            .catch(err => console.log('Could not delete customer \\n', err));\n    }\n}\n\nexport default apiModel;"]},"metadata":{},"sourceType":"module"}